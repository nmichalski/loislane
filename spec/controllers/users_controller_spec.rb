require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe UsersController do
  before :each do
    @user = mock_model(User)
    controller.should_receive(:current_user).at_least(:once).and_return(@user)
  end

  describe "GET edit" do
    it "assigns the requested user as @user" do
      get :edit
      assigns(:user).should be(@user)
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested user" do
        params = {'email' => 'example@example.com'}
        @user.should_receive(:update_attributes).with(params)
        put :update, :id => @user.id, :user => params
      end

      it "redirects to the user" do
        params = {'email' => 'example@example.com'}
        @user.should_receive(:update_attributes).with(params)
        put :update, :id => @user.id, :user => params
        response.should be_success
      end
    end

    describe "with invalid params" do
      it "assigns the user as @user" do
        User.stub(:find) { mock_user(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:user).should be(mock_user)
      end

      it "re-renders the 'edit' template" do
        User.stub(:find) { mock_user(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user" do
      User.stub(:find).with("37") { mock_user }
      mock_user.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the users list" do
      User.stub(:find) { mock_user }
      delete :destroy, :id => "1"
      response.should redirect_to(users_url)
    end
  end

end
